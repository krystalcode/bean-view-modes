<?php
/**
 * @file
 * Module file for the bean_view_mode module.
 */

/**
 * Implements hook_permission().
 */
function bean_view_modes_permission() {
  $permissions = array();

  $permissions['administer bean_view_modes settings'] = array(
    'title' => t('Administer Bean View Modes settings'),
    'description' => t('Choose which themes and regions are available for bean placement in block configuration'),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function bean_view_modes_menu() {
  $items = array();

  $items['admin/config/content/bean-view-modes'] = array(
    'title' => 'Bean View Modes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bean_view_modes_settings_form'),
    'access arguments' => array('administer bean_view_modes settings'),
  );

  return $items;
}

/**
 * Returns the module configuration form.
 */
function bean_view_modes_settings_form($form, &$form_state) {
  $themes = list_themes();

  $form['bean_view_modes_allow_all_regions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow bean placement in all regions'),
    '#default_value' => variable_get('bean_view_modes_allow_all_regions'),
    '#description' => t('By default, beans cannot be placed in regions that are not selected for having their own view modes. Enable this to allow bean placement in all regions regardless. In that case, beans will be rendered using the default view mode, or the one manually set.') . '<br />' . t('Note that this applies only when bean placement is done using the block module configuration form.'),
  );

  foreach ($themes as $theme) {
    // Allow to configure only enabled themes.
    if (!$theme->status) {
      continue;
    }

    $form[$theme->name] = array(
      '#type' => 'fieldset',
      '#title' => t('%theme theme', array('%theme' => $theme->info['name'])),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE
    );

    $theme_variable = 'bean_view_modes_' . $theme->name;
    $form[$theme->name][$theme_variable] = array(
      '#type' => 'checkbox',
      '#title' => t('%theme theme', array('%theme' => $theme->info['name'])),
      '#default_value' => variable_get($theme_variable),
    );

    $regions_variable = 'bean_view_modes_' . $theme->name . '_regions';
    $form[$theme->name][$regions_variable] = array(
      '#type' => 'select',
      '#title' => t('Select the regions for the %theme theme', array('%theme' => $theme->info['name'])),
      '#options' => system_region_list($theme->name),
      '#multiple' => TRUE,
      '#states' => array(
        'visible' => array(
          'input[name="bean_view_modes_' . $theme->name . '"]' => array('checked' => TRUE),
        ),
      ),
      '#default_value' => variable_get($regions_variable),
    );
  }

  return system_settings_form($form);
}

/**
 * Implements hook_entity_info_alter().
 *
 * Adds bean view modes for the regions selected in the module configuration
 * form.
 */
function bean_view_modes_entity_info_alter(&$entity_info) {
  $themes = list_themes();
  foreach ($themes as $theme) {
    // Take into account only enabled themes. Just in case a theme was enabled
    // and regions were selected, then disabled and the corresponding variables
    // were not cleaned up.
    if (!$theme->status) {
      continue;
    }

    if (!variable_get('bean_view_modes_' . $theme->name)) {
      continue;
    }

    $regions = variable_get('bean_view_modes_' . $theme->name . '_regions');

    // We load all regions only so that we get the regions' human readable names.
    $all_regions = system_region_list($theme->name);

    foreach ($regions as $region) {
      $entity_info['bean']['view modes'][$theme->name . '_' . $region] = array(
        'label' => t('!theme - !region', array(
          '!theme' => $theme->info['name'],
          '!region' => $all_regions[$region]
        )),
        'custom settings' => TRUE,
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bean_view_modes_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  // We want to do any alterations only for "bean" blocks.
  if ($form['module']['#value'] !== 'bean') {
    return;
  }

  $form['#submit'][] = '_bean_view_modes_block_admin_configure_submit';

  // Do not proceed with altering the regions available for placement if making
  // all regions available is chosen in the related configuration option.
  if (variable_get('bean_view_modes_allow_all_regions')) {
    return;
  }

  // Disabled themes/regions without custom view modes.
  $themes = array_keys(list_themes());
  foreach ($form['regions'] as $theme => $render_array) {
    // Make sure this is a theme and not a render array option.
    if (!in_array($theme, $themes)) {
      continue;
    }

    // Deny access to the theme if it is not selected in the module settings.
    if (!variable_get('bean_view_modes_' . $theme)) {
      $form['regions'][$theme]['#access'] = FALSE;
      continue;
    }

    $enabled_regions = variable_get('bean_view_modes_' . $theme . '_regions');
    foreach ($form['regions'][$theme]['#options'] as $key => $name) {
      if (!in_array($key, $enabled_regions)) {
        unset($form['regions'][$theme]['#options'][$key]);
      }
    }
  }
}

/**
 * Custom submit callback for the block_admin_configure form.
 *
 * Updates the bean view mode to match the first region that it is placed
 * at. There can only be one view mode per bean so we pick the first
 * theme/region that is one of the view mode enabled.
 */
function _bean_view_modes_block_admin_configure_submit($form, &$form_state) {
  $view_mode = 'default';

  foreach ($form_state['values']['regions'] as $theme => $region) {
    if (!$region || !variable_get('bean_view_modes_' . $theme)) {
      continue;
    }

    $enabled_regions = variable_get('bean_view_modes_' . $theme . '_regions');
    if (!in_array($region, $enabled_regions)) {
      continue;
    }

    $view_mode = $theme . '_' . $region;
  }

  _bean_view_modes_bean_set_view_mode($form_state['values']['delta'], $view_mode);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bean_view_modes_form_bean_set_default_confirm_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = '_bean_view_modes_bean_set_default_confirm_submit';

  // We want the view mode of the previously default bean to be available in the
  // custom submit callback. We cannot retrieve it within the custom callback
  // because the default submit callback provided by the "bean" changes the
  // default bean. We cannot run this callback before the default one either,
  // because the default callback uses $form['#bean] to save the bean and since
  // the $form array is not passed by reference, it overrides any changes when
  // saving the bean object.
  $default_bean = bean_load_delta($form['#bean']->delta);
  $form_state['bean_view_modes_view_mode'] = $default_bean->view_mode;
}

/**
 * Custom submit callback for the "bean_set_default" form.
 *
 * Updates the new default bean to have the same view mode as with the previous
 * default one. The correct view mode was calculated when the block was
 * configured and saved only in the revision that was the default at that
 * moment. Instead of recalculating it, we take it from there.
 */
function _bean_view_modes_bean_set_default_confirm_submit($form, &$form_state) {
  if (empty($form_state['values']['confirm'])) {
    return;
  }

  _bean_view_modes_bean_set_view_mode(
    $form['#bean']->delta,
    $form_state['bean_view_modes_view_mode'],
    $form['#bean']->vid
  );
}

/**
 * Changes the view mode for a "bean".
 *
 * @param string $delta
 *   The delta of the bean.
 * @param string $view_mode
 *   The view mode to set.
 * @param string|null $revision
 *   The revision of the bean to update. If NULL, the default revision will be
 *   updated.
 */
function _bean_view_modes_bean_set_view_mode($delta, $view_mode, $revision = NULL) {
  // Load and save the bean updating only its view mode. For whatever reason the
  // view mode is stored both in the "view_mode" column and serialized within
  // the "data" column in the "bean" table, so we need to update it in both.
  $bean = bean_load_delta($delta, FALSE, $revision);
  $bean->view_mode = $view_mode;
  $bean->setValues(array('view_mode' => $view_mode));
  $bean->save();
}
